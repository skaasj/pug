// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MODEL_PUG_H_
#define FLATBUFFERS_GENERATED_MODEL_PUG_H_

#include "flatbuffers/flatbuffers.h"


namespace pug {

struct Rating;
struct Dataset;

struct Rating : private flatbuffers::Table {
  uint32_t uidx() const { return GetField<uint32_t>(4, 0); }
  uint32_t iidx() const { return GetField<uint32_t>(6, 0); }
  float rate() const { return GetField<float>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* uidx */) &&
           VerifyField<uint32_t>(verifier, 6 /* iidx */) &&
           VerifyField<float>(verifier, 8 /* rate */) &&
           verifier.EndTable();
  }
};

struct RatingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uidx(uint32_t uidx) { fbb_.AddElement<uint32_t>(4, uidx, 0); }
  void add_iidx(uint32_t iidx) { fbb_.AddElement<uint32_t>(6, iidx, 0); }
  void add_rate(float rate) { fbb_.AddElement<float>(8, rate, 0); }
  RatingBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RatingBuilder &operator=(const RatingBuilder &);
  flatbuffers::Offset<Rating> Finish() {
    auto o = flatbuffers::Offset<Rating>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Rating> CreateRating(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t uidx = 0,
   uint32_t iidx = 0,
   float rate = 0) {
  RatingBuilder builder_(_fbb);
  builder_.add_rate(rate);
  builder_.add_iidx(iidx);
  builder_.add_uidx(uidx);
  return builder_.Finish();
}

struct Dataset : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<Rating>> *trainset() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Rating>> *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<Rating>> *testset() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Rating>> *>(6); }
  uint32_t n_train() const { return GetField<uint32_t>(8, 0); }
  uint32_t n_test() const { return GetField<uint32_t>(10, 0); }
  uint32_t n_user() const { return GetField<uint32_t>(12, 0); }
  uint32_t n_item() const { return GetField<uint32_t>(14, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* trainset */) &&
           verifier.Verify(trainset()) &&
           verifier.VerifyVectorOfTables(trainset()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* testset */) &&
           verifier.Verify(testset()) &&
           verifier.VerifyVectorOfTables(testset()) &&
           VerifyField<uint32_t>(verifier, 8 /* n_train */) &&
           VerifyField<uint32_t>(verifier, 10 /* n_test */) &&
           VerifyField<uint32_t>(verifier, 12 /* n_user */) &&
           VerifyField<uint32_t>(verifier, 14 /* n_item */) &&
           verifier.EndTable();
  }
};

struct DatasetBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_trainset(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Rating>>> trainset) { fbb_.AddOffset(4, trainset); }
  void add_testset(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Rating>>> testset) { fbb_.AddOffset(6, testset); }
  void add_n_train(uint32_t n_train) { fbb_.AddElement<uint32_t>(8, n_train, 0); }
  void add_n_test(uint32_t n_test) { fbb_.AddElement<uint32_t>(10, n_test, 0); }
  void add_n_user(uint32_t n_user) { fbb_.AddElement<uint32_t>(12, n_user, 0); }
  void add_n_item(uint32_t n_item) { fbb_.AddElement<uint32_t>(14, n_item, 0); }
  DatasetBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  DatasetBuilder &operator=(const DatasetBuilder &);
  flatbuffers::Offset<Dataset> Finish() {
    auto o = flatbuffers::Offset<Dataset>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<Dataset> CreateDataset(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Rating>>> trainset = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Rating>>> testset = 0,
   uint32_t n_train = 0,
   uint32_t n_test = 0,
   uint32_t n_user = 0,
   uint32_t n_item = 0) {
  DatasetBuilder builder_(_fbb);
  builder_.add_n_item(n_item);
  builder_.add_n_user(n_user);
  builder_.add_n_test(n_test);
  builder_.add_n_train(n_train);
  builder_.add_testset(testset);
  builder_.add_trainset(trainset);
  return builder_.Finish();
}

inline const Dataset *GetDataset(const void *buf) { return flatbuffers::GetRoot<Dataset>(buf); }

inline bool VerifyDatasetBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Dataset>(); }

inline void FinishDatasetBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Dataset> root) { fbb.Finish(root); }

}  // namespace pug

#endif  // FLATBUFFERS_GENERATED_MODEL_PUG_H_
